import numpy as np
import pandas as pd


import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
%matplotlib inline

import plotly.graph_objects as go

plt.rcParams['figure.figsize'] = (16, 9)
pd.set_option('display.max_rows', 500)

sns.set(style="darkgrid")

## Data preparation
#Load the data into a pandas dataframe. 
df=pd.read_csv("../data/external/country_vaccinations.csv")
df.head()

# a lot of NaNs that we need to fill with some values
df.isnull().sum()

#Fill NaNs with 0 and then drop all countries with iso_code = 0. This is key information that we need so dropping unknowns is the best way to handle. 
df.fillna(0, inplace = True)
df.drop(df.index[df['iso_code'] == 0], inplace = True)

#Check how many nulls after filling
df.isnull().sum()

df.info()

df['date'] =  pd.to_datetime(df['date'], format='%Y-%m-%d')

#Print column names and drop the ones not using
df.columns

df.drop(["people_fully_vaccinated","daily_vaccinations_raw","people_fully_vaccinated_per_hundred",
         "daily_vaccinations_per_million","people_vaccinated_per_hundred", "source_name","source_website"],axis=1, inplace=True)
		 
	

## Data Understanding
#Save Germany data into a separate dataframe
df_germany = df[df["iso_code"] == 'DEU'].copy()
df_germany

#Drop the dates with missing values, previously NaN that we filled with 0. 
df_germany.drop(df_germany.index[df_germany['total_vaccinations'] == 0], inplace = True)

#Plot total vaccinations as a function of date
plt.figure(figsize=(18,6))
sns.lineplot(data=df_germany, x="date", y="total_vaccinations")
plt.title("Total vaccinations in Germany")
plt.xticks(rotation=45)
plt.show()

#Plot daily vaccinations as a function of date
plt.figure(figsize=(18,6))
sns.lineplot(data=df_germany, x="date", y="daily_vaccinations")

plt.xticks(rotation=90)
plt.title("Daily vaccinations in Germany")

#Save India data into a separate dataframe
df_India = df[df["iso_code"] == 'IND'].copy()
df_India

#Drop the dates with missing values, previously NaN that we filled with 0. 
df_India.drop(df_India.index[df_India['total_vaccinations'] == 0], inplace = True)

#Plot total vaccinations as a function of date
plt.figure(figsize=(18,6))
sns.lineplot(data=df_India, x="date", y="total_vaccinations")
plt.title("Total vaccinations in India")
plt.xticks(rotation=45)
plt.show()

#Plot daily vaccinations as a function of date
plt.figure(figsize=(18,6))
sns.lineplot(data=df_India, x="date", y="daily_vaccinations")

plt.xticks(rotation=90)
plt.title("Daily vaccinations in India")

#Group by total vaccinations given by country and sort descending to identify the top 10 countries. 
vacc_by_country = df.groupby('country').max().sort_values('total_vaccinations', ascending=False)
vacc_by_country = vacc_by_country.iloc[:10]
vacc_by_country

#Now sort by total vaccinations per 100
vacc_by_country = vacc_by_country.sort_values('total_vaccinations_per_hundred', ascending=False)
vacc_by_country

plt.figure(figsize=(18, 6))
plt.bar(vacc_by_country.index, vacc_by_country.total_vaccinations_per_hundred)

plt.xticks(rotation = 90)
plt.ylabel('Vaccinations per 100')
plt.xlabel('Country')
plt.show()

# Country with most vaccinated people. Obviously, this will be skewed towards highest populated countries that effectively depoyed vaccinations to bulk of its population.
total_vacc_by_country = df.groupby('country').max().sort_values('total_vaccinations', ascending=False)
total_vacc_by_country = total_vacc_by_country.iloc[:10]
total_vacc_by_country

plt.figure(figsize=(16, 7))
plt.bar(total_vacc_by_country.index, total_vacc_by_country.total_vaccinations)

plt.title('Total vaccinations per country')
plt.xticks(rotation = 90)
plt.ylabel('Total vaccinations')
plt.xlabel('Country')
plt.show()

#Sort by total vaccinations delivered by countries and group by vaccines. 
vacc_names_by_country = df.groupby('vaccines').max().sort_values('total_vaccinations', ascending=False)
vacc_names_by_country.head()

#Get the top 10 vaccines by country for easy plotting
vacc_names_by_country = vacc_names_by_country.iloc[:10]
vacc_names_by_country

#Reset index to move vaccines from being index to a column. 
#This makes it easy for us to plot using Seaborn, especially if we want to sort by country. 
vacc_names_by_country=vacc_names_by_country.reset_index()
vacc_names_by_country

plt.figure(figsize=(12,8))

sns.barplot(data = vacc_names_by_country, x='vaccines', y = 'total_vaccinations', hue = 'country', dodge=False)
plt.xticks(rotation=90)

## Static visulisation of Vaccine rates of 3 countries
df_threeCountries = df[(df["iso_code"] == 'DEU')|(df["iso_code"] == 'IND')|(df["iso_code"] == 'USA')].copy()
df_threeCountries

#Drop the dates with missing values, previously NaN that we filled with 0. 
df_threeCountries.drop(df_threeCountries.index[df_threeCountries['total_vaccinations_per_hundred'] == 0], inplace = True)

#Plot total vaccinations as a function of date
plt.figure(figsize=(18,6))
sns.lineplot(data=df_threeCountries, x="date", y="total_vaccinations_per_hundred", hue='country')
plt.title("Vaccination rate per hundred for three countries")
plt.savefig("../plots/vaccineRate_threeCountries_static.png")
plt.show()